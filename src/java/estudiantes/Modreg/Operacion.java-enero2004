/*
 * Operacion.java
 *
 * Created on 6 de junio de 2003, 11:03
 */
package estudiantes.Modreg;

import java.util.Vector ;
import java.io.* ;
import java.net.* ;

/**
 *
 * @author  Claudia J. Choconta Vargas
 * @version 
 */
public class Operacion extends Object {

    /** Atributos */
    // Constantes Puerto y Servidor donde se hacen peticiones y se reciben
    // las respuestas
    private final int modifreg1 = 10020;
    private final int modifreg2 = 10021;
    private final int modifreg3 = 10022;
    private final int MAXBUFF = 1100;
    //private final String Server = "10.1.1.182" ;  serv 2003-2  
    //private final String Server = "10.1.0.103" ;        
    private final String Server = "10.1.1.234" ;  
    private int Port ;
    // Numero de Carnet al cual estan asocidas las solicitudes de Registro
    private String carnet ;
    // Solicitudes de una operacion de registro. Cada fila contiene una 
    // Objeto Solicitud
    private Solicitud Solicitudes[] ;
    // Contiene la cadena que se le envia al servidor, con las solicitudes
    // Si la solicitud es de consulta, solEnvio contiene una cadena con formato
    // "carnet,L, ,0,0,0, ,"
    // Si la solicitud es de modificacion, solEnvio contiene una cadena con 
    // formato
    // "carnet  NEMONICO      ngrupo    nlab    naux     "
    private String solEnvio ;
    // Contiene la cadena que el servidor envia como respuesta a las solicitudes
    // Si la solicitud es de consulta, solRespuesta contiene una cadena con 
    // formato
    // "S,0,ZCTL,cod,NEMONICO,cod,NEMONICO,..."
    private String solRespuesta ;
    // Si la lectura del Socket no fue exitosa, contiene el mensaje de error
    private String error ; 
    
    
    /** Creates new Operacion */
    public Operacion() {
        this.Solicitudes = null ;
        this.carnet = null ;
        this.solEnvio = null ;
        this.solRespuesta = null ;
    }
    
    /**
    * @param carnet Numero de carnet del estudiante que esta relacionado con la
    * operacion
    */  
    public Operacion (String carnet){
        this.carnet = carnet ;
        this.Solicitudes = null ;
        this.solEnvio = null ;
        this.solRespuesta = null ;
    }
    
    /**
    * @param carnet Numero de carnet del estudiante que esta relacionado con la
    * operacion
    * @param Solicitudes Arreglo de Solicitud 
    */  
    public Operacion (String carnet, Solicitud solicitudes[]) {
        this.carnet = carnet ;
        this.Solicitudes = solicitudes ;
    }
    
    /**
    * @param 
    * @return 
    * @exception Ninguna 
    */      
    public boolean ejecutarOperacion(){

        // La solicitud es de consulta porque no hay solicitudes asociados al 
        // carnet, el carnet debe existir
        if ( this.Solicitudes == null && this.carnet != null ){
            crearConsulta() ;
        }else{
            crearSolicitudes() ;
        }
        
        return enviarSolicitudes() ; 
    }
    
    /**
    * @param 
    * @return 
    * @exception Ninguna 
    */      
    public boolean enviarSolicitudes(){
	Socket sockCli ;
        DataInputStream input ;
	DataOutputStream output ;
        
        byte mensajeE [] = new byte[4096] ;
        byte mensajeR [] = new byte[4096] ;
	String nameServer, strE, strR ;



        
  	sockCli=null ;
	nameServer = new String("");
        limpiarBuffers(mensajeE,mensajeR);
	try{
            

            setPuerto() ;
            // Conectandose al puerto Port del Servidor Server
            sockCli = new Socket(Server, Port) ;
            // Creando la conexion de salida del socket
            output = new DataOutputStream(sockCli.getOutputStream()) ;
            mensajeE = this.solEnvio.getBytes() ;
            //Enviando la peticion
            output.write(mensajeE);

            // Creando la conexion de entrada del socket
            input = new DataInputStream(sockCli.getInputStream());
            //Recibiendo la respuesta
            input.read(mensajeR) ;
            this.solRespuesta = new String (mensajeR) ;
    
            strToOperacion();
            sockCli.close() ;


            
	}
        catch(IOException e){
            this.error = "Error De Conexion :" + e.toString() ;
            return false ;
	}   
        
        return true ;
    }
    
    /** 
    * @param 
    * @return 
    * @exception Ninguna 
    */
    public Solicitud getSolicitud(int index) {
        return this.Solicitudes[index] ;
    }
    
    /** 
    * @param 
    * @return 
    * @exception Ninguna 
    */
    public int numeroSolicitudes() {
        return this.Solicitudes.length ;
    }    
    
    /** 
    * @param 
    * @return 
    * @exception Ninguna 
    */
    public String getSolRespuesta() {
        return this.solRespuesta ;
    }

    
    /**
    * @param 
    * @return 
    * @exception Ninguna 
    */      
    public void crearConsulta(){
        String carnet = this.carnet ;

	if (carnet.length() == 4){
            carnet = carnet + "   " ;
	}else if (carnet.length() == 5){
            carnet = carnet + "  " ;
	}else if (carnet.length() == 6){
            carnet = carnet + " " ;
	}
        this.solEnvio = carnet + " L          0    0    0     " + '\0';
    }

    /**
    * @param 
    * @return 
    * @exception Ninguna 
    */      
    public void crearSolicitudes(){
        int len = this.Solicitudes.length;
        this.solEnvio = "" ;
        String carnet = this.carnet ;

	if (carnet.length() == 4){
            carnet = carnet + "   " ;
	}else if (carnet.length() == 5){
            carnet = carnet + "  " ;
	}else if (carnet.length() == 6){
            carnet = carnet + " " ;
	}
        for ( int i = 0 ; i < len ; i++ ){

            this.solEnvio = this.solEnvio + 
                agregarEspacios(carnet, 8 ) + 
                this.Solicitudes[i].getTipOp() +
                agregarEspacios(this.Solicitudes[i].getCodAsig (), 10 ) +
                agregarEspacios(this.Solicitudes[i].getNumGrp (), 5 ) +
                agregarEspacios(this.Solicitudes[i].getNumLab (), 5 ) +
                agregarEspacios(this.Solicitudes[i].getNumAux (), 6 ) ;

        }
        this.solEnvio = this.solEnvio + '\0' ;
    }

    
    /**
    * @param 
    * @return 
    * @exception Ninguna 
    */      
    private String agregarEspacios(String str, int len){
        int slen = len - str.length() ;
        
        for ( int i = 0 ; i < slen ; i++ ){
            str = str + " " ;
        }
        
        return str ;
    }
    

    /**
    * @param 
    * @return 
    * @exception Ninguna 
    */      
    private void setPuerto(){
        Integer carnet = new Integer(this.carnet) ;
        int semestre = 1 ;
	semestre = carnet.intValue() % 10 ;

	if (semestre < 4)
            this.Port = modifreg1 ;
	else if (semestre < 7)
            this.Port = modifreg2 ;
	else
            this.Port = modifreg3 ;
    }
    
    /**
    * @param 
    * @return 
    * @exception Ninguna 
    */      
    private void strToOperacion() {
        if (this.Solicitudes != null){
            int len = this.Solicitudes.length;
            String sSol = this.solRespuesta ;
            char rpta = ' ' ;

            for ( int i = 0 ; (i < len) && (sSol.length() > 0) ; i++ ){
                Solicitud sol = this.Solicitudes[i] ;
                rpta = sSol.charAt(34) ;
                sol.setRespuesta (rpta) ;
                sSol = sSol.substring(35) ;
                this.Solicitudes[i] = sol ; 
            }    
        }
    }
    
    private void limpiarBuffers(byte mensajeE[], byte mensajeR[]){
        for ( int i = 0 ; i < MAXBUFF ; i++ ){
            mensajeE [i] = 0X0 ;
            mensajeR [i] = 0X0 ;
        }
    }
}
